//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCCal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevRedSolCRA : DbContext
    {
        public DevRedSolCRA()
            : base("name=DevRedSolCRA")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<T_CONSULTANT> T_CONSULTANT { get; set; }
        public virtual DbSet<T_CRA> T_CRA { get; set; }
        public virtual DbSet<T_CUSTOMER> T_CUSTOMER { get; set; }
        public virtual DbSet<T_PROJECT> T_PROJECT { get; set; }
        public virtual DbSet<T_TYPEJOUR> T_TYPEJOUR { get; set; }
    
        public virtual int AddMonthValues(string mOIS, string aNNEE, Nullable<int> rESSOURCE, string jOUR, Nullable<int> jOURINFO)
        {
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var aNNEEParameter = aNNEE != null ?
                new ObjectParameter("ANNEE", aNNEE) :
                new ObjectParameter("ANNEE", typeof(string));
    
            var rESSOURCEParameter = rESSOURCE.HasValue ?
                new ObjectParameter("RESSOURCE", rESSOURCE) :
                new ObjectParameter("RESSOURCE", typeof(int));
    
            var jOURParameter = jOUR != null ?
                new ObjectParameter("JOUR", jOUR) :
                new ObjectParameter("JOUR", typeof(string));
    
            var jOURINFOParameter = jOURINFO.HasValue ?
                new ObjectParameter("JOURINFO", jOURINFO) :
                new ObjectParameter("JOURINFO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMonthValues", mOISParameter, aNNEEParameter, rESSOURCEParameter, jOURParameter, jOURINFOParameter);
        }
    
        public virtual int DeleteDayMonthValues(string mOIS, string aNNEE, string jOUR)
        {
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var aNNEEParameter = aNNEE != null ?
                new ObjectParameter("ANNEE", aNNEE) :
                new ObjectParameter("ANNEE", typeof(string));
    
            var jOURParameter = jOUR != null ?
                new ObjectParameter("JOUR", jOUR) :
                new ObjectParameter("JOUR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDayMonthValues", mOISParameter, aNNEEParameter, jOURParameter);
        }
    
        public virtual int DeleteMonthValues(string mOIS, string aNNEE)
        {
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var aNNEEParameter = aNNEE != null ?
                new ObjectParameter("ANNEE", aNNEE) :
                new ObjectParameter("ANNEE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMonthValues", mOISParameter, aNNEEParameter);
        }
    
        public virtual ObjectResult<LoadCRAMonth_Result> LoadCRAMonth(string mOIS, string aNNEE)
        {
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var aNNEEParameter = aNNEE != null ?
                new ObjectParameter("ANNEE", aNNEE) :
                new ObjectParameter("ANNEE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadCRAMonth_Result>("LoadCRAMonth", mOISParameter, aNNEEParameter);
        }
    
        public virtual ObjectResult<LoadLegende_Result> LoadLegende()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadLegende_Result>("LoadLegende");
        }
    
        public virtual ObjectResult<LoadMonthValues_Result> LoadMonthValues(string mOIS, string aNNEE)
        {
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var aNNEEParameter = aNNEE != null ?
                new ObjectParameter("ANNEE", aNNEE) :
                new ObjectParameter("ANNEE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadMonthValues_Result>("LoadMonthValues", mOISParameter, aNNEEParameter);
        }
    
        public virtual ObjectResult<LoadAllEventCRA_Result> LoadAllEventCRA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoadAllEventCRA_Result>("LoadAllEventCRA");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
